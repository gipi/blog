
# Getting started

    $ pip install -r requirements.txt

# DEPLOY

To do this, you need a shell account (ssh maybe) so to manage the following
commands

  $ python manage.py bootstrap

  $ mkdir media/js media/TeX media/uploads media/fonts
  $ wget <jquery URL> -O media/js/jquery.js
  $ wget <some URL pointed by link on http://www.josbuivenga.demon.nl/delicious.html>

If you need to create an alternative stylesheet for the code
embedded in the pages yu have to execute the following command

  $ pygmentize -S friendly -f html > <project_root>/media/css/native.css


In order to use alternative settings for your site, you can use
a 'local_settings.py' file. Remember to set DEFAULT_FROM_EMAIL correctly
otherwise you cannot receive the email when someone comment.

There is a bootstrap script in 'scripts/' you can use to quickly deployment
and some htaccess and fcgi example.

Exists a settings named GOOGLE_VERIFICATION_PAGE that points to the page as
created by the Google's webmaster tool.


# BACKUP

In 'scripts/' there is a script named 'backup.sh' which can save in a local
GIT repository the blog posts. It needs only a '.backuprc' file with a shell
variable 'GIT_OBJ_DB_PATH' pointing to the local repository. Eventually a
post-receive hook can push this changes in a remote repository.


# HACKING

The code for this project is contained in a git repository hosted by gitorious
and can be cloned with

  git clone git://gitorious.org/yet-another-django-blog/yet-another-django-blog.git

The development model which I (hope to) follow is to use this branching model

  - master	stable branch
  - next	development branch, when ready it's merged in master
  - <whatever>	feature branch, branch off from next and when ready it's merged
              	in next.
